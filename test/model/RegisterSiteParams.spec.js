/**
 * oxd-server
 * oxd-server
 *
 * OpenAPI spec version: 4.0
 * Contact: yuriyz@gluu.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OxdServer);
  }
}(this, function(expect, OxdServer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OxdServer.RegisterSiteParams();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RegisterSiteParams', function() {
    it('should create an instance of RegisterSiteParams', function() {
      // uncomment below and update the code to test RegisterSiteParams
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be.a(OxdServer.RegisterSiteParams);
    });

    it('should have the property authorizationRedirectUri (base name: "authorization_redirect_uri")', function() {
      // uncomment below and update the code to test the property authorizationRedirectUri
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property opHost (base name: "op_host")', function() {
      // uncomment below and update the code to test the property opHost
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property postLogoutRedirectUris (base name: "post_logout_redirect_uris")', function() {
      // uncomment below and update the code to test the property postLogoutRedirectUris
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property applicationType (base name: "application_type")', function() {
      // uncomment below and update the code to test the property applicationType
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property responseTypes (base name: "response_types")', function() {
      // uncomment below and update the code to test the property responseTypes
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property grantTypes (base name: "grant_types")', function() {
      // uncomment below and update the code to test the property grantTypes
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property acrValues (base name: "acr_values")', function() {
      // uncomment below and update the code to test the property acrValues
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientName (base name: "client_name")', function() {
      // uncomment below and update the code to test the property clientName
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientJwksUri (base name: "client_jwks_uri")', function() {
      // uncomment below and update the code to test the property clientJwksUri
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientTokenEndpointAuthMethod (base name: "client_token_endpoint_auth_method")', function() {
      // uncomment below and update the code to test the property clientTokenEndpointAuthMethod
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientRequestUris (base name: "client_request_uris")', function() {
      // uncomment below and update the code to test the property clientRequestUris
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientFrontchannelLogoutUris (base name: "client_frontchannel_logout_uris")', function() {
      // uncomment below and update the code to test the property clientFrontchannelLogoutUris
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientSectorIdentifierUri (base name: "client_sector_identifier_uri")', function() {
      // uncomment below and update the code to test the property clientSectorIdentifierUri
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property contacts (base name: "contacts")', function() {
      // uncomment below and update the code to test the property contacts
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property redirectUris (base name: "redirect_uris")', function() {
      // uncomment below and update the code to test the property redirectUris
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property uiLocales (base name: "ui_locales")', function() {
      // uncomment below and update the code to test the property uiLocales
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property claimsLocales (base name: "claims_locales")', function() {
      // uncomment below and update the code to test the property claimsLocales
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property claimsRedirectUri (base name: "claims_redirect_uri")', function() {
      // uncomment below and update the code to test the property claimsRedirectUri
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "client_id")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property clientSecret (base name: "client_secret")', function() {
      // uncomment below and update the code to test the property clientSecret
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property trustedClient (base name: "trusted_client")', function() {
      // uncomment below and update the code to test the property trustedClient
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property accessTokenAsJwt (base name: "access_token_as_jwt")', function() {
      // uncomment below and update the code to test the property accessTokenAsJwt
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property accessTokenSigningAlg (base name: "access_token_signing_alg")', function() {
      // uncomment below and update the code to test the property accessTokenSigningAlg
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

    it('should have the property rptAsJwt (base name: "rpt_as_jwt")', function() {
      // uncomment below and update the code to test the property rptAsJwt
      //var instance = new OxdServer.RegisterSiteParams();
      //expect(instance).to.be();
    });

  });

}));
